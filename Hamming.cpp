/*
 *  Hamming.cpp
 *  MRF49XA
 *
 *  Created by William Dillon on 2/11/14.
 *  Copyright (c) 2014 Oregon State University (COAS). All rights reserved.
 *
 *  Modified by David Freitag 1/13/15
 *
 */

#include <Arduino.h>
#include "Hamming.h"

#ifdef __AVR__
#include <avr/pgmspace.h>
#endif

Hamming_t Hamming = Hamming_t();

#ifdef __AVR__
static const uint8_t generator[16] PROGMEM = {
#else
static const uint8_t generator[16] = {
#endif
	0x00,
   	0x17,
   	0x2B,
   	0x3C,
   	0x4D,
   	0x5A,
   	0x66,
   	0x71,
   	0x8E,
   	0x99,
   	0xA5,
   	0xB2,
   	0xC3,
   	0xD4,
   	0xE8,
   	0xFF
};

// 	   This table of values maps codewords back to data.  It's organized into 16
// rows of 16 columns. Because we're using a "systematic" code, which means
// that the data nibble is available as the first nibble of the codeword, the
// current table is organized into rows of the same (uncorrected) data nibble.
// I've decided to let the structure strongly prefer the rows over the columns.
// To get an idea of the scale of the effect, I've counted the "value" part of
// the returns here (low bits) for each.
//
//     The rows contain 12 instances of each value, and the columns have 5.
// Ideally, there would be a roughly equal number in the columns and rows.
// This would mean that the error correction isn't biased against the parity
// part of the codeword.  Really, I'm playing games here, because the code
// is only a one-error correcting code, so there would be lots of blanks in
// the table. I don't have a way to represent this, and I don't have an
// out-of-band "erasure" signal, so I just replace it with a plausible response
// that might be wrong, but it might be right, too.  Ultimately, we're still
// only getting our one guarenteed correction plus some speculative responses.
//
//     If there is some way to mark "erasures", such as using the ASCII "null"
// character we could depend on the higher-level protocol to do some correction.
// For example, using NMEA-0183 sentences (GPS), in the case of a single
// erasure, the lost character could be recovered using the checksum.  We can
// extract erasures from this table by examining the symptom word (higher-order
// nibble).  If the symptom has 2 bits, it's a double-bit error and we're not
// confident in its value.  We cannot distinguish between 1 and 3 bit errors,
// and they will be blindly modified, sometimes incorrectly.
#ifdef __AVR__
static const uint8_t check[256] PROGMEM =
#else
static const uint8_t check[256] =
#endif
{
	0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x71, 0x80, 0x90, 0xa0, 0xb2, 0xc0, 0xd4, 0xe8, 0xf0, // 12 0's
   	0x70, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01, 0xf1, 0xe9, 0xd5, 0xc1, 0xb3, 0xa1, 0x91, 0x81, // 12 1's
   	0xb0, 0xa2, 0x92, 0x82, 0xf2, 0xea, 0xd6, 0xc2, 0x32, 0x22, 0x12, 0x02, 0x73, 0x62, 0x52, 0x42, // 12 2's
   	0xc3, 0xd7, 0xeb, 0xf3, 0x83, 0x93, 0xa3, 0xb1, 0x43, 0x53, 0x63, 0x72, 0x03, 0x13, 0x23, 0x33, // 12 3's
   	0xd0, 0xc4, 0xf4, 0xec, 0x94, 0x84, 0xb6, 0xa4, 0x54, 0x44, 0x75, 0x64, 0x14, 0x04, 0x34, 0x24, // 12 4's
   	0xa5, 0xb7, 0x85, 0x95, 0xed, 0xf5, 0xc5, 0xd1, 0x25, 0x35, 0x05, 0x15, 0x65, 0x74, 0x45, 0x55, // 12 5's
   	0x66, 0x77, 0x46, 0x56, 0x26, 0x36, 0x06, 0x16, 0xee, 0xf6, 0xc6, 0xd2, 0xa6, 0xb4, 0x86, 0x96, // 12 6's
   	0x17, 0x07, 0x37, 0x27, 0x57, 0x47, 0x76, 0x67, 0x97, 0x87, 0xb5, 0xa7, 0xd3, 0xc7, 0xf7, 0xef, // 12 7's
   	0xe0, 0xf8, 0xc8, 0xdc, 0xa8, 0xba, 0x88, 0x98, 0x68, 0x79, 0x48, 0x58, 0x28, 0x38, 0x08, 0x18, // 12 8's
   	0x99, 0x89, 0xbb, 0xa9, 0xdd, 0xc9, 0xf9, 0xe1, 0x19, 0x09, 0x39, 0x29, 0x59, 0x49, 0x78, 0x69, // 12 9's
   	0x5a, 0x4a, 0x7b, 0x6a, 0x1a, 0x0a, 0x3a, 0x2a, 0xde, 0xca, 0xfa, 0xe2, 0x9a, 0x8a, 0xb8, 0xaa, // 12 a's
   	0x2b, 0x3b, 0x0b, 0x1b, 0x6b, 0x7a, 0x4b, 0x5b, 0xab, 0xb9, 0x8b, 0x9b, 0xe3, 0xfb, 0xcb, 0xdf, // 12 b's
   	0x3c, 0x2c, 0x1c, 0x0c, 0x7d, 0x6c, 0x5c, 0x4c, 0xbe, 0xac, 0x9c, 0x8c, 0xfc, 0xe4, 0xd8, 0xcc, // 12 c's
   	0x4d, 0x5d, 0x6d, 0x7c, 0x0d, 0x1d, 0x2d, 0x3d, 0xcd, 0xd9, 0xe5, 0xfd, 0x8d, 0x9d, 0xad, 0xbf, // 12 d's
   	0x8e, 0x9e, 0xae, 0xbc, 0xce, 0xda, 0xe6, 0xfe, 0x0e, 0x1e, 0x2e, 0x3e, 0x4e, 0x5e, 0x6e, 0x7f, // 12 e's
   	0xff, 0xe7, 0xdb, 0xcf, 0xbd, 0xaf, 0x9f, 0x8f, 0x7e, 0x6f, 0x5f, 0x4f, 0x3f, 0x2f, 0x1f, 0x0f  // 12 f's
//  5 0s, 5 7s, 5 Bs, 5 Cs, 5 Ds, 5 As, 5 6s, 5 1s, 5 Es, 5 9s, 5 5s, 5 2s, 5 3s, 5 4s, 5 8s, 5 Fs
};

uint8_t Hamming_t::EncodeNibble(uint8_t nibble)
{
	return generator[nibble & 0x0F];
}

uint16_t Hamming_t::EncodeByte(uint8_t data)
{
	uint16_t temp = 0x0000;

	temp |= generator[(data >> 4) & 0x0F] << 8;
	temp |= generator[ data       & 0x0F];

	return temp;
}

uint8_t Hamming_t::DecodeNibble(uint8_t nibble)
{
	return check[nibble] & 0x0F;
}

uint16_t Hamming_t::DecodeByte(uint16_t symbol)
{
	uint16_t highNibble = (check[symbol >> 8] & 0xFF) << 4;
	uint8_t lowNibble = check[symbol & 0xFF] & 0x0F;

	return highNibble | lowNibble;
}
